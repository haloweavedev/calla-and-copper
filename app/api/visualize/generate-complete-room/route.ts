import { GoogleGenerativeAI } from '@google/generative-ai'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { roomImageBase64, roomImageMimeType, products, userContext } = body

    // Validate all required fields are present
    if (!roomImageBase64 || !roomImageMimeType || !products || !Array.isArray(products) || products.length === 0) {
      return NextResponse.json(
        { error: 'Missing required fields: roomImageBase64, roomImageMimeType, products (array)' },
        { status: 400 }
      )
    }

    console.log('[API] Generating complete room with', products.length, 'products')
    console.log('[API] User context provided:', !!userContext)

    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GENERATIVE_AI_API_KEY!)

    // Create specific replacement instructions for each furniture category
    const sofaProduct = products.find(p => p.category === 'Sofas')
    const tableProduct = products.find(p => p.category === 'Tables')  
    const chairProduct = products.find(p => p.category === 'Chairs')
    const storageProduct = products.find(p => p.category === 'Storage')
    const rugProduct = products.find(p => p.category === 'Rugs')
    const decorProduct = products.find(p => p.category === 'Decor')

    let replacementInstructions = []
    if (sofaProduct) replacementInstructions.push(`place the ${sofaProduct.name} in the center of the room facing the existing sideboard`)
    if (tableProduct) replacementInstructions.push(`put the ${tableProduct.name} in front of the sofa as a coffee table`)
    if (chairProduct) replacementInstructions.push(`position the ${chairProduct.name} to the side of the room as an accent chair`)
    if (storageProduct && storageProduct.name !== 'Walnut Record Console') replacementInstructions.push(`replace the existing sideboard with the ${storageProduct.name}`)
    if (rugProduct) replacementInstructions.push(`add the ${rugProduct.name} under the seating area`)
    if (decorProduct && decorProduct.name !== 'Ornate Gilt Mirror') replacementInstructions.push(`replace the round mirror with the ${decorProduct.name}`)
    
    // Much more specific placement instructions following docs examples
    let promptText = `Using the provided image of the room, make these specific changes: ${replacementInstructions.join(', ')}. Keep the walls, flooring, lighting, windows, and architectural details exactly the same. Arrange the furniture in a natural, livable way that makes sense for the room's layout and proportions.`

    console.log('[API] Sending room editing prompt to Gemini:', promptText)
    console.log('[API] Room image data - MIME type:', roomImageMimeType)
    console.log('[API] Room image data - Base64 length:', roomImageBase64?.length)
    console.log('[API] Room image data - First 50 chars:', roomImageBase64?.substring(0, 50))

    // Following docs EXACTLY - only the room image, then text prompt
    const contentParts = [
      {
        inlineData: {
          mimeType: roomImageMimeType,
          data: roomImageBase64,
        },
      },
      { text: promptText }
    ]

    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' })
    const result = await model.generateContent(contentParts)

    console.log('[API] Gemini generation completed, checking for image parts...')

    // Check if result contains image parts
    const response = await result.response
    const parts = response.candidates?.[0]?.content?.parts

    if (!parts || parts.length === 0) {
      throw new Error('No content parts generated by Gemini')
    }

    // Find the first image part
    const imagePart = parts.find((part: any) => part.inlineData)
    
    if (!imagePart || !imagePart.inlineData) {
      throw new Error('No image was generated by Gemini')
    }

    console.log(`[API] Image file received, type: ${imagePart.inlineData.mimeType}`)
    console.log(`[API] Generated image file received successfully`)

    // Get the raw base64 string
    const rawBase64 = imagePart.inlineData.data
    
    // Construct the proper Data URL with prefix
    const dataUrl = `data:${imagePart.inlineData.mimeType || 'image/png'};base64,${rawBase64}`

    console.log('[API] Complete room generation successful, returning data URL')

    return NextResponse.json({ imageUrl: dataUrl }, { status: 200 })

  } catch (error) {
    console.error('[API] Error in generate-complete-room route:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}