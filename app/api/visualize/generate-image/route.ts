import { google } from '@ai-sdk/google'
import { generateText } from 'ai'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { roomImageUrl, productImageUrl, productCategory, productName } = body

    // Validate all required fields are present
    if (!roomImageUrl || !productImageUrl || !productCategory || !productName) {
      return NextResponse.json(
        { error: 'Missing required fields: roomImageUrl, productImageUrl, productCategory, productName' },
        { status: 400 }
      )
    }

    console.log('[API] Generating image with Gemini for product category:', productCategory)

    const gemini = google('gemini-2.5-flash-image-preview')

    // Construct high-precision replacement prompt
    const prompt = `You are an expert photo editor specializing in photorealistic interior design mockups.
Your task is to seamlessly integrate a new product into a user's room photo.

- User's Room: Provided in the first image.
- New Product: A '${productName}' which is a type of '${productCategory}', provided in the second image.

Instructions:
1. Identify the existing '${productCategory}' in the user's room photo.
2. **Replace** it with the new product from the second image.
3. The final image must be a single, coherent, photorealistic scene.
4. Perfectly match the lighting, shadows, perspective, and scale of the original room photo.
5. Do not add any text, watermarks, or annotations. The output must be only the final edited image.`

    console.log('[API] Sending high-precision prompt to Gemini:', prompt)

    const result = await generateText({
      model: gemini,
      messages: [
        {
          role: 'user',
          content: [
            { type: 'text', text: prompt },
            { type: 'image', image: roomImageUrl },
            { type: 'image', image: productImageUrl }
          ]
        }
      ],
      providerOptions: {
        google: {
          responseModalities: ['IMAGE']
        }
      }
    })

    console.log('[API] Gemini generation completed, checking for image files...')

    // Check if result contains image files
    if (!result.files || result.files.length === 0) {
      throw new Error('No image was generated by Gemini')
    }

    // Get the first generated image file
    const imageFile = result.files[0]
    // --- Start of new block ---

    console.log(`[API] Image file received, type: ${imageFile.mediaType}`);
    console.log(`[API] imageFile.base64 is of type: ${typeof imageFile.base64}`);
    console.log(`[API] imageFile.base64 length: ${imageFile.base64?.length || 'undefined'}`);

    // Get the raw base64 string (which was missing the data URL prefix)
    const rawBase64 = imageFile.base64;
    
    // Construct the proper Data URL with prefix
    const dataUrl = `data:${imageFile.mediaType || 'image/png'};base64,${rawBase64}`;

    console.log('[API] Constructed Data URL (first 100 chars):', dataUrl.substring(0, 100));
    
    // --- End of new block ---

    console.log('[API] Image generation successful, returning data URL')

    return NextResponse.json({ imageUrl: dataUrl }, { status: 200 })

  } catch (error) {
    console.error('[API] Error in generate-image route:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}