import { google } from '@ai-sdk/google'
import { generateText } from 'ai'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { roomImageBase64, roomImageMimeType, productImageUrl, productCategory, productName, userContext } = body

    // Validate all required fields are present
    if (!roomImageBase64 || !roomImageMimeType || !productImageUrl || !productCategory || !productName) {
      return NextResponse.json(
        { error: 'Missing required fields: roomImageBase64, roomImageMimeType, productImageUrl, productCategory, productName' },
        { status: 400 }
      )
    }

    console.log('[API] Generating image with Gemini for product category:', productCategory)
    console.log('[API] User context provided:', !!userContext)

    const gemini = google('gemini-2.5-flash-image-preview')

    // Simple, effective prompt like nano banana
    let prompt = `Using the exact room shown in the first uploaded image, add the ${productName} from the second image to the room. Keep the walls, flooring, lighting, windows, and architectural details exactly the same as in the first room image. Only add the furniture - do not change the room structure, colors, or layout.`
    
    // Add style context if available
    if (userContext?.styleProfile?.styleHierarchy?.foundation) {
      prompt += ` Style: ${userContext.styleProfile.styleHierarchy.foundation}.`
    }

    console.log('[API] Sending context-aware prompt to Gemini:', prompt)

    const result = await generateText({
      model: gemini,
      messages: [
        {
          role: 'user',
          content: [
            { type: 'image', image: `data:${roomImageMimeType};base64,${roomImageBase64}` },
            { type: 'image', image: productImageUrl },
            { type: 'text', text: prompt }
          ]
        }
      ],
      providerOptions: {
        google: {
          responseModalities: ['IMAGE']
        }
      }
    })

    console.log('[API] Gemini generation completed, checking for image files...')

    // Check if result contains image files
    if (!result.files || result.files.length === 0) {
      throw new Error('No image was generated by Gemini')
    }

    // Get the first generated image file
    const imageFile = result.files[0]
    // --- Start of new block ---

    console.log(`[API] Image file received, type: ${imageFile.mediaType}`);
    console.log(`[API] imageFile.base64 is of type: ${typeof imageFile.base64}`);
    console.log(`[API] imageFile.base64 length: ${imageFile.base64?.length || 'undefined'}`);

    // Get the raw base64 string (which was missing the data URL prefix)
    const rawBase64 = imageFile.base64;
    
    // Construct the proper Data URL with prefix
    const dataUrl = `data:${imageFile.mediaType || 'image/png'};base64,${rawBase64}`;

    console.log('[API] Constructed Data URL successfully');
    
    // --- End of new block ---

    console.log('[API] Image generation successful, returning data URL')

    return NextResponse.json({ imageUrl: dataUrl }, { status: 200 })

  } catch (error) {
    console.error('[API] Error in generate-image route:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}