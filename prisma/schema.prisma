generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  User                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Bundle {
  id            String          @id
  title         String
  description   String
  styleTag      Style
  roomType      RoomType
  budgetRange   Budget
  moodboardUrl  String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  BundleProduct BundleProduct[]
}

model BundleProduct {
  bundleId  String
  productId String
  Bundle    Bundle  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([bundleId, productId])
}

model Creation {
  id                    String   @id
  userId                String
  style                 String?
  roomType              String?
  budget                String?
  lifestyleTags         String[]
  styleProfile          Json?
  originalImageUrl      String?
  originalImageBase64   String?
  originalImageMimeType String?
  analysisResult        Json?
  recommendedProductIds String[]
  recommendationsData   Json?
  generatedImageUrl     String?
  generationStatus      String   @default("not_generated")
  name                  String?
  notes                 String?
  isPublic              Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  User                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ImageGeneration {
  id               String   @id
  userId           String
  generationType   String
  prompt           String
  inputImageUrl    String?
  outputImageUrl   String?
  productIds       String[]
  metadata         Json?
  status           String   @default("pending")
  errorMessage     String?
  processingTimeMs Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                    String      @id
  userId                String
  totalAmount           Float
  status                String
  stripePaymentIntentId String      @unique
  createdAt             DateTime    @default(now())
  updatedAt             DateTime
  User                  User        @relation(fields: [userId], references: [id])
  OrderItem             OrderItem[]
}

model OrderItem {
  id        String  @id
  orderId   String
  productId String
  quantity  Int
  price     Float
  Order     Order   @relation(fields: [orderId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id              String            @id
  name            String
  description     String
  price           Float
  category        String
  styleTags       Style[]
  dimensions      String
  imageUrl        String
  model3dUrl      String?
  isArCompatible  Boolean           @default(false)
  stripeProductId String?           @unique
  status          String            @default("ACTIVE")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  BundleProduct   BundleProduct[]
  OrderItem       OrderItem[]
  SnapshotProduct SnapshotProduct[]
}

model RoomData {
  id           String    @id
  userId       String
  roomType     RoomType?
  layoutPreset String?
  length       Float?
  width        Float?
  height       Float?
  photoUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Snapshot {
  id              String            @id
  userId          String
  name            String?
  roomPhotoUrl    String?
  roomSizeInfo    String?
  aiTags          String[]
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  SnapshotProduct SnapshotProduct[]
}

model SnapshotProduct {
  snapshotId String
  productId  String
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  Snapshot   Snapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)

  @@id([snapshotId, productId])
}

model User {
  id              String            @id
  email           String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  image           String?
  name            String
  emailVerified   Boolean           @default(false)
  Account         Account[]
  Creation        Creation[]
  ImageGeneration ImageGeneration[]
  Order           Order[]
  RoomData        RoomData[]
  Session         Session[]
  Snapshot        Snapshot[]
  UserProfile     UserProfile?
  UserUpload      UserUpload[]
}

model UserProfile {
  id             String   @id
  userId         String   @unique
  preferredStyle Style?
  budget         Budget?
  tags           String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserUpload {
  id        String   @id
  userId    String
  fileName  String
  filePath  String
  publicUrl String
  mimeType  String
  fileSize  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, value])
}

enum Budget {
  LOW
  MODERATE
  FLEXIBLE
}

enum RoomType {
  LIVING_ROOM
  BEDROOM
  STUDIO
  OFFICE
  DINING_ROOM
  KITCHEN
}

enum Style {
  SCANDINAVIAN
  INDUSTRIAL
  BOHO
  MODERN
  JAPANDI
  MINIMALIST
  ECLECTIC
}
