This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: app/welcome, app/demo, app/product, lib/mock-data/products.ts, prisma/schema.prisma
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
app/
  demo/
    _components/
      ARViewer.tsx
    product/
      [id]/
        page.tsx
  product/
    [id]/
      _components/
        ProductVisualization.tsx
      page.tsx
  welcome/
    _components/
      Step1Style.tsx
      Step2Details.tsx
      Step3Upload.tsx
      Step4Results.tsx
    actions.ts
    page.tsx
lib/
  mock-data/
    products.ts
prisma/
  schema.prisma

================================================================
Files
================================================================

================
File: app/demo/_components/ARViewer.tsx
================
'use client'

import Script from 'next/script'
import React, { useEffect, useRef, useState } from 'react'

type ModelViewerProps = React.DetailedHTMLProps<
  React.HTMLAttributes<HTMLElement>,
  HTMLElement
> & {
  src: string
  alt?: string
  'camera-controls'?: boolean
  'auto-rotate'?: boolean
  ar?: boolean
  'ar-modes'?: string
  'ar-placement'?: string
  'environment-image'?: string
  'shadow-intensity'?: string | number
  style?: React.CSSProperties
}

const ModelViewer = 'model-viewer' as unknown as React.FC<ModelViewerProps>

export function ARViewer() {
  const [loading, setLoading] = useState(true)
  const modelViewerRef = useRef<HTMLElement | null>(null)

  useEffect(() => {
    const modelViewer = modelViewerRef.current
    if (!modelViewer) return

    const onLoad = () => setLoading(false)
    const onProgress = () => setLoading(false)

    modelViewer.addEventListener('load', onLoad as EventListener)
    modelViewer.addEventListener('progress', onProgress as EventListener)

    return () => {
      modelViewer.removeEventListener('load', onLoad as EventListener)
      modelViewer.removeEventListener('progress', onProgress as EventListener)
    }
  }, [])

  return (
    <>
      <Script
        type="module"
        src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"
        strategy="lazyOnload"
      />
      <div className="w-full h-full relative">
        {loading && (
          <div className="absolute inset-0 flex items-center justify-center bg-white z-10">
            <p className="font-bold animate-pulse">Loading 3D Model...</p>
          </div>
        )}
        <ModelViewer
          ref={modelViewerRef as unknown as React.Ref<HTMLElement>}
          src="https://cdn.glitch.global/2526f7bc-7148-4d8b-b41d-9e807db2cf9a/blackLeatherChair.glb?v=1724772841737"
          alt="A 3D model of a black leather chair"
          camera-controls
          auto-rotate
          ar
          ar-modes="webxr scene-viewer quick-look"
          ar-placement="floor"
          environment-image="neutral"
          shadow-intensity={1}
          style={{ width: '100%', height: '100%' }}
        />
      </div>
    </>
  )
}

================
File: app/product/[id]/_components/ProductVisualization.tsx
================
'use client'

import React, { useState, useEffect } from 'react'
import Image from 'next/image'
import { useDemoStore } from '@/lib/store/demo-store'

interface ProductVisualizationProps {
  product: {
    imageUrl: string
    category: string
  }
}

export function ProductVisualization({ product }: ProductVisualizationProps) {
  const { uploadedFileUrl } = useDemoStore()
  
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [generatedImage, setGeneratedImage] = useState<string | null>(null)

  // Clear error after 5 seconds
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => {
        setError(null)
      }, 5000)
      return () => clearTimeout(timer)
    }
  }, [error])

  // Don't render if no room photo is available
  if (!uploadedFileUrl) {
    return null
  }

  const handleVisualize = async () => {
    setIsLoading(true)
    setError(null)

    try {
      // Step 1: Describe the room
      console.log('[CLIENT] Calling describe-room API...')
      const describeResponse = await fetch('/api/visualize/describe-room', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrl: uploadedFileUrl,
        }),
      })

      if (!describeResponse.ok) {
        throw new Error('Failed to describe room')
      }

      const { description, mainFurnitureItem } = await describeResponse.json()
      console.log('[CLIENT] Room description received:', { description, mainFurnitureItem })

      // Step 2: Generate the visualization
      console.log('[CLIENT] Calling generate-image API...')
      const generateResponse = await fetch('/api/visualize/generate-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          roomImageUrl: uploadedFileUrl,
          productImageUrl: product.imageUrl,
          productCategory: product.category,
          roomDescription: description,
          mainFurnitureItem,
        }),
      })

      if (!generateResponse.ok) {
        throw new Error('Failed to generate visualization')
      }

      const { imageUrl } = await generateResponse.json()
      console.log('[CLIENT] Generated image received')
      setGeneratedImage(imageUrl)

    } catch (error) {
      console.error('[CLIENT] Error in visualization process:', error)
      setError('Failed to generate visualization. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <>
      <button
        className="fixed bottom-8 left-8 bg-black text-white font-bold py-3 px-6 shadow-[4px_4px_0px_#000] border-2 border-black hover:bg-gray-800 transition-all z-40"
        onClick={handleVisualize}
        disabled={isLoading}
      >
        {isLoading ? 'Visualizing...' : 'Visualize in My Room'}
      </button>

      {/* Modal for displaying generated image */}
      {generatedImage && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-white p-4 border-2 border-black shadow-[8px_8px_0px_#000] relative max-w-2xl max-h-[90vh] overflow-auto">
            <button
              className="absolute top-2 right-2 bg-black text-white w-8 h-8 flex items-center justify-center font-bold hover:bg-gray-800 transition-all"
              onClick={() => setGeneratedImage(null)}
            >
              Ã—
            </button>
            <div className="mt-8">
              <h3 className="text-lg font-bold mb-4">AI Visualization Result</h3>
              <Image
                src={generatedImage}
                alt="AI Visualization"
                width={512}
                height={512}
                className="w-full h-auto"
              />
            </div>
          </div>
        </div>
      )}

      {/* Error toast */}
      {error && (
        <div className="fixed bottom-20 left-8 bg-red-500 text-white p-3 font-bold shadow-[4px_4px_0px_#000] border-2 border-black z-50 max-w-sm">
          {error}
        </div>
      )}
    </>
  )
}

================
File: app/welcome/_components/Step2Details.tsx
================
'use client'
import { useDemoStore, RoomType, Budget } from '@/lib/store/demo-store'

const roomTypes: RoomType[] = ['Living Room', 'Bedroom', 'Studio/Open Plan', 'Kitchen', 'Home Office']
const budgets: Budget[] = ['$500', '$1500', '$3500+']
const lifestyleOptions = ['Pet-friendly', 'Lots of natural light', 'Need storage solutions', 'Frequently entertain']

export function Step2Details() {
  const { setStep, setData, roomType, budget, lifestyleTags } = useDemoStore()

  const handleTagToggle = (tag: string) => {
    const newTags = lifestyleTags.includes(tag)
      ? lifestyleTags.filter((t) => t !== tag)
      : [...lifestyleTags, tag]
    setData({ lifestyleTags: newTags })
  }

  const canProceed = roomType && budget

  return (
    <div className="max-w-2xl mx-auto text-center">
      <h1 className="text-3xl font-bold mb-2">Tell us about your space.</h1>
      <p className="text-md mb-8">Help us create designs that fit your life.</p>
      <div className="space-y-6 text-left p-6 border-2 border-black bg-white shadow-[8px_8px_0px_#000]">
        <div>
          <label className="block font-bold mb-2">Room Type Selection:</label>
          <div className="flex flex-wrap gap-2">
            {roomTypes.map((type) => (
              <button key={type} onClick={() => setData({ roomType: type })} className={`px-4 py-2 border-2 border-black font-bold transition-all ${roomType === type ? 'bg-black text-white' : 'bg-white text-black hover:bg-gray-100'}`}>
                {type}
              </button>
            ))}
          </div>
        </div>
        <div>
          <label htmlFor="budget" className="block font-bold mb-2">Budget range:</label>
          <select id="budget" value={budget ?? ''} onChange={(e) => setData({ budget: e.target.value as Budget })} className="w-full p-2 border-2 border-black bg-white font-bold">
            <option value="" disabled>Select a budget</option>
            {budgets.map((b) => <option key={b} value={b}>{b}</option>)}
          </select>
        </div>
        <div>
          <label className="block font-bold mb-2">Optional lifestyle tags:</label>
          <div className="flex flex-wrap gap-2">
            {lifestyleOptions.map((tag) => (
              <button key={tag} onClick={() => handleTagToggle(tag)} className={`px-4 py-2 border-2 border-black font-bold transition-all ${lifestyleTags.includes(tag) ? 'bg-black text-white' : 'bg-white text-black hover:bg-gray-100'}`}>
                {tag}
              </button>
            ))}
          </div>
        </div>
      </div>
      <div className="mt-8 flex gap-4 justify-center">
        <button onClick={() => setStep(1)} className="px-8 py-3 border-2 border-black bg-white font-bold hover:bg-gray-100 shadow-[4px_4px_0px_#000]">Back</button>
        <button onClick={() => setStep(3)} disabled={!canProceed} className="px-8 py-3 border-2 border-black bg-black text-white font-bold disabled:bg-gray-400 disabled:text-gray-600 disabled:shadow-none hover:bg-gray-800 shadow-[4px_4px_0px_#000]">Next</button>
      </div>
    </div>
  )
}

================
File: lib/mock-data/products.ts
================
export type Product = {
  id: number
  name: string
  style: 'SCANDINAVIAN' | 'INDUSTRIAL' | 'BOHO' | 'MODERN' | 'VINTAGE'
  category: string
  description: string
  tags: string[]
  price: number
  imageUrl: string
}

export const productCatalog: Product[] = [
  // Scandinavian
  {
    id: 1,
    name: 'Asgeir Oak Chair',
    style: 'SCANDINAVIAN',
    category: 'Chairs',
    description:
      'A minimalist chair with clean lines and a natural oak finish, perfect for light and airy rooms.',
    tags: ['wood', 'minimal', 'light-tone', 'seating', 'living-room'],
    price: 250,
    imageUrl: '/images/products/scandi-chair.jpg',
  },
  {
    id: 7,
    name: 'Fjord Linen Pillow',
    style: 'SCANDINAVIAN',
    category: 'Decor',
    description:
      'A cozy, neutral-toned linen pillow that adds texture and comfort to sofas and beds.',
    tags: ['cozy', 'natural-fiber', 'minimal', 'textiles', 'beige'],
    price: 50,
    imageUrl: '/images/products/scandi-pillow.jpg',
  },
  {
    id: 8,
    name: 'Hygge Wool Rug',
    style: 'SCANDINAVIAN',
    category: 'Rugs',
    description:
      'A soft, high-pile wool rug in a cream color to anchor your space in warmth.',
    tags: ['cozy', 'soft', 'light-tone', 'flooring', 'white-walls'],
    price: 450,
    imageUrl: '/images/products/scandi-rug.jpg',
  },

  // Industrial
  {
    id: 2,
    name: 'Forged Steel Coffee Table',
    style: 'INDUSTRIAL',
    category: 'Tables',
    description:
      'A raw, sturdy coffee table with a reclaimed wood top and forged steel legs.',
    tags: ['metal', 'urban', 'raw-finish', 'wood', 'living-room'],
    price: 350,
    imageUrl: '/images/products/industrial-table.jpg',
  },
  {
    id: 6,
    name: 'Edison Cage Pendant Light',
    style: 'INDUSTRIAL',
    category: 'Lighting',
    description:
      'An exposed Edison bulb in a black metal cage, perfect for moody, focused lighting.',
    tags: ['lighting', 'metal', 'exposed-bulb', 'dark-tone', 'urban'],
    price: 120,
    imageUrl: '/images/products/industrial-light.jpg',
  },
  {
    id: 9,
    name: 'Riveted Iron Bookshelf',
    style: 'INDUSTRIAL',
    category: 'Storage',
    description:
      'A tall, open-back bookshelf made from riveted iron and distressed wood planks.',
    tags: ['metal', 'storage', 'raw-finish', 'urban', 'bookshelf'],
    price: 750,
    imageUrl: '/images/products/industrial-shelf.jpg',
  },

  // Boho
  {
    id: 3,
    name: 'Woven Macrame Wall Art',
    style: 'BOHO',
    category: 'Decor',
    description:
      'A large, hand-woven macrame piece that adds texture and an eclectic feel to any wall.',
    tags: ['textured', 'natural-fiber', 'eclectic', 'wall-art', 'handmade'],
    price: 80,
    imageUrl: '/images/products/boho-macrame.jpg',
  },
  {
    id: 10,
    name: 'Rattan Peacock Chair',
    style: 'BOHO',
    category: 'Chairs',
    description:
      'An iconic, high-backed peacock chair made from natural rattan as a statement piece.',
    tags: ['rattan', 'natural-fiber', 'seating', 'eclectic', 'statement-piece'],
    price: 400,
    imageUrl: '/images/products/boho-chair.jpg',
  },
  {
    id: 13,
    name: 'Jute Area Rug',
    style: 'BOHO',
    category: 'Rugs',
    description:
      'A durable jute rug that adds earthy texture and warmth to floors.',
    tags: ['natural-fiber', 'textured', 'flooring', 'earthy'],
    price: 220,
    imageUrl: '/images/products/boho-rug.jpg',
  },

  // Modern
  {
    id: 4,
    name: 'Gloss White Sideboard',
    style: 'MODERN',
    category: 'Storage',
    description:
      'A sleek, handleless sideboard with a high-gloss finish for a contemporary space.',
    tags: ['sleek', 'contemporary', 'storage', 'minimal', 'white-walls'],
    price: 600,
    imageUrl: '/images/products/modern-sideboard.jpg',
  },
  {
    id: 11,
    name: 'Abstract Chrome Floor Lamp',
    style: 'MODERN',
    category: 'Lighting',
    description:
      'A sculptural floor lamp with a chrome finish and an abstract form.',
    tags: ['lighting', 'metal', 'sleek', 'contemporary', 'statement-piece'],
    price: 320,
    imageUrl: '/images/products/modern-lamp.jpg',
  },
  {
    id: 14,
    name: 'Low-Profile Modular Sofa',
    style: 'MODERN',
    category: 'Sofas',
    description:
      'A modular, low-profile sofa with clean geometry and performance fabric.',
    tags: ['seating', 'minimal', 'sleek', 'modular'],
    price: 1400,
    imageUrl: '/images/products/modern-sofa.jpg',
  },

  // Vintage
  {
    id: 5,
    name: 'Emerald Velvet Sofa',
    style: 'VINTAGE',
    category: 'Sofas',
    description:
      'A classic Chesterfield sofa upholstered in rich, emerald green velvet.',
    tags: ['classic', 'cozy', 'upholstered', 'velvet', 'dark-tone'],
    price: 1200,
    imageUrl: '/images/products/vintage-sofa.jpg',
  },
  {
    id: 12,
    name: 'Ornate Gilt Mirror',
    style: 'VINTAGE',
    category: 'Decor',
    description:
      'A large, rectangular mirror with an ornate, gold-gilt frame for a touch of classic elegance.',
    tags: ['classic', 'wall-art', 'statement-piece', 'gold-accent'],
    price: 280,
    imageUrl: '/images/products/vintage-mirror.jpg',
  },
  {
    id: 15,
    name: 'Walnut Record Console',
    style: 'VINTAGE',
    category: 'Storage',
    description:
      'A mid-century inspired walnut console perfect for records and media.',
    tags: ['wood', 'storage', 'mid-century', 'classic'],
    price: 680,
    imageUrl: '/images/products/vintage-console.jpg',
  },
]

================
File: app/product/[id]/page.tsx
================
import { PrismaClient } from '@prisma/client'
import Image from 'next/image'
import { notFound } from 'next/navigation'
import { ProductVisualization } from './_components/ProductVisualization'

const prisma = new PrismaClient()

export default async function ProductDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = await params
  const product = await prisma.product.findUnique({
    where: { id },
  })

  if (!product) {
    notFound()
  }

  return (
    <div className="container mx-auto p-8">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="relative w-full h-96 rounded-lg overflow-hidden">
          <Image
            src={product.imageUrl}
            alt={product.name}
            fill
            className="object-cover"
          />
        </div>
        <div>
          <h1 className="text-4xl font-bold">{product.name}</h1>
          <p className="text-gray-500 mt-2">{product.category}</p>
          <p className="text-3xl font-bold my-4">${product.price.toFixed(2)}</p>
          <p className="text-gray-700 leading-relaxed">{product.description}</p>
          <div className="mt-6">
            <h3 className="font-semibold">Style Tags:</h3>
            <div className="flex flex-wrap gap-2 mt-2">
              {product.styleTags.map((tag) => (
                <span key={tag} className="px-3 py-1 bg-gray-200 text-gray-800 text-sm rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          </div>
          <button className="w-full mt-8 px-6 py-3 font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700">
            Add to Cart (Coming Soon)
          </button>
        </div>
      </div>
      <ProductVisualization product={{ imageUrl: product.imageUrl, category: product.category }} />
    </div>
  )
}

================
File: app/welcome/_components/Step1Style.tsx
================
'use client'
import { useDemoStore, StyleSelection } from '@/lib/store/demo-store'
import { StyleCard } from '@/components/cards'

const styles: { name: StyleSelection; title: string; tags: string[]; image: string }[] = [
  { name: 'SCANDINAVIAN', title: 'SCANDINAVIAN', tags: ['Clean', 'Warm', 'Minimal'], image: '/style-quiz/style-scandinavian.png' },
  { name: 'INDUSTRIAL', title: 'INDUSTRIAL', tags: ['Raw', 'Urban'], image: '/style-quiz/style-industrial.png' },
  { name: 'BOHO', title: 'BOHO', tags: ['Textured', 'Eclectic'], image: '/style-quiz/style-boho.png' },
  { name: 'MODERN', title: 'MODERN', tags: ['Sleek', 'Contemporary'], image: '/style-quiz/style-modern.png' },
  { name: 'VINTAGE', title: 'VINTAGE', tags: ['Classic', 'Cozy'], image: '/style-quiz/style-vintage.png' },
]

export function Step1Style() {
  const { setStep, setData, style: selectedStyle } = useDemoStore()

  const handleSelect = (style: StyleSelection) => {
    setData({ style })
    setTimeout(() => setStep(2), 200)
  }

  return (
    <div className="text-center">
      <h1 className="text-3xl font-bold mb-2">Which room speaks to you?</h1>
      <p className="text-md mb-8">Pick the style that makes you feel at home.</p>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
        {styles.map((style) => (
          <StyleCard
            key={style.name}
            imageSrc={style.image}
            imageAlt={style.title}
            tags={style.tags}
            title={style.title}
            variant="selectable"
            selected={selectedStyle === style.name}
            onClick={() => handleSelect(style.name)}
          />
        ))}
      </div>
    </div>
  )
}

================
File: app/welcome/_components/Step4Results.tsx
================
'use client'
import { useDemoStore } from '@/lib/store/demo-store'
import Image from 'next/image'
import Link from 'next/link'

export function Step4Results() {
  const { analysisResult, recommendations, reset } = useDemoStore()

  if (!analysisResult || !recommendations) {
    return (
      <div className="text-center">
        <h1 className="text-3xl font-bold animate-pulse">Analyzing your space...</h1>
        <p>Our AI is curating your personalized matches.</p>
      </div>
    )
  }

  return (
    <div>
      <div className="text-center mb-12">
        <h1 className="text-3xl font-bold mb-2">Here are your personalized matches.</h1>
        <p className="text-md">Each recommendation is scored based on your style, space, and budget.</p>
      </div>

      <div className="p-6 border-2 border-black bg-white shadow-[8px_8px_0px_#000] mb-12">
        <h2 className="font-bold text-xl mb-2">AI Room Analysis:</h2>
        <p className="mb-4">{analysisResult.description}</p>
        <div className="flex flex-wrap gap-2">
          {analysisResult.tags.map(tag => (
            <span key={tag} className="px-3 py-1 border-2 border-black bg-gray-100 font-bold text-sm">{tag}</span>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {recommendations.map((product) => (
          <Link href={`/demo/product/${product.id}`} key={product.id}>
            <div className="border-2 border-black p-2 bg-white h-full flex flex-col cursor-pointer transition-all duration-200 hover:shadow-[4px_4px_0px_#000]">
              <div className="w-full h-64 bg-gray-200 border-2 border-black relative">
                <Image src={product.imageUrl} alt={product.name} fill style={{ objectFit: 'cover' }} />
              </div>
              <div className="text-left mt-2 flex-grow flex flex-col justify-between">
                <div>
                  <h3 className="font-bold text-lg">{product.name}</h3>
                  {product.category ? (
                    <p className="text-sm text-gray-600">{product.category}</p>
                  ) : null}
                </div>
                <p className="font-bold text-xl mt-2">${product.price}</p>
              </div>
            </div>
          </Link>
        ))}
      </div>
      <div className="text-center mt-12">
        <button onClick={reset} className="px-8 py-3 border-2 border-black bg-white font-bold hover:bg-gray-100 shadow-[4px_4px_0px_#000]">Start Over</button>
      </div>
    </div>
  )
}

================
File: app/welcome/page.tsx
================
'use client'
import { useDemoStore } from '@/lib/store/demo-store'

// We will create these components in the following subphases
import { Step1Style } from './_components/Step1Style'
import { Step2Details } from './_components/Step2Details'
import { Step3Upload } from './_components/Step3Upload'
import { Step4Results } from './_components/Step4Results'

export default function WelcomePage() {
  const { step } = useDemoStore()

  const renderStep = () => {
    switch (step) {
      case 1:
        return <Step1Style />
      case 2:
        return <Step2Details />
      case 3:
        return <Step3Upload />
      case 4:
        return <Step4Results />
      default:
        return <Step1Style />
    }
  }

  return (
    <div className={`w-full min-h-screen bg-white text-black flex flex-col items-center justify-center p-4 sm:p-8`}>
      <div className="w-full max-w-5xl">
        {renderStep()}
      </div>
    </div>
  )
}

================
File: prisma/schema.prisma
================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Style {
  SCANDINAVIAN
  INDUSTRIAL
  BOHO
  MODERN
  JAPANDI
  MINIMALIST
  ECLECTIC
}

enum RoomType {
  LIVING_ROOM
  BEDROOM
  STUDIO
  OFFICE
  DINING_ROOM
  KITCHEN
}

enum Budget {
  LOW
  MODERATE
  FLEXIBLE
}

// MODELS

// This model is a public representation of a user, linked to Supabase Auth.
model User {
  id          String        @id @default(uuid()) // This MUST match the UUID from auth.users
  email       String        @unique
  role        String        @default("USER") // e.g., "USER" or "ADMIN"
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  profile     UserProfile?
  roomData    RoomData[]
  snapshots   Snapshot[]
  orders      Order[]
}

model UserProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredStyle Style?
  budget        Budget?
  tags          String[] // e.g., ["pet_friendly", "natural_light"]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RoomData {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomType      RoomType?
  layoutPreset  String?  // e.g., "small_studio", "large_living"
  length        Float?
  width         Float?
  height        Float?
  photoUrl      String?  // URL to image in Supabase Storage
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id              String           @id @default(cuid())
  name            String
  description     String
  price           Float
  category        String           // e.g., "Sofa", "Lamp", "Rug"
  styleTags       Style[]
  dimensions      String           // e.g., "120x80x90cm"
  imageUrl        String
  model3dUrl      String?          // URL to GLB/USDZ file
  isArCompatible  Boolean          @default(false)
  stripeProductId String?          @unique
  status          String           @default("ACTIVE") // ACTIVE, OUT_OF_STOCK, HIDDEN
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bundleProducts  BundleProduct[]
  snapshotProducts SnapshotProduct[]
  orderItems      OrderItem[]
}

model Bundle {
  id             String          @id @default(cuid())
  title          String
  description    String
  styleTag       Style
  roomType       RoomType
  budgetRange    Budget
  moodboardUrl   String
  bundleProducts BundleProduct[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model BundleProduct {
  bundleId  String
  bundle    Bundle   @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([bundleId, productId])
}

model Snapshot {
  id               String            @id @default(cuid())
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String?           // e.g., "My Japandi Bedroom"
  roomPhotoUrl     String?
  roomSizeInfo     String?           // e.g., "Preset: Large Living" or "Manual: 10x12ft"
  aiTags           String[]
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  snapshotProducts SnapshotProduct[]
}

model SnapshotProduct {
  snapshotId String
  snapshot   Snapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([snapshotId, productId])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Float
  status      String      // e.g., "PENDING", "COMPLETED", "FAILED"
  stripePaymentIntentId String @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float   // Price at the time of purchase
}

================
File: app/demo/product/[id]/page.tsx
================
'use client'
import { useParams, notFound } from 'next/navigation'
import { productCatalog } from '@/lib/mock-data/products'
import Image from 'next/image'
import Link from 'next/link'
import { useState } from 'react'
import { ARViewer } from '@/app/demo/_components/ARViewer'

export default function DemoProductPage() {
  const params = useParams()
  const productId = Number(params.id)
  const [isARVisible, setIsARVisible] = useState(false)

  const product = productCatalog.find((p) => p.id === productId)

  if (!product) {
    notFound()
  }

  return (
    <>
      <div className={`w-full min-h-screen bg-white text-black flex flex-col items-center p-4 sm:p-8`}>
        <div className="w-full max-w-4xl">
          <div className="mb-8">
            <Link href="/welcome" className="font-bold border-2 border-black px-4 py-2 bg-white hover:bg-gray-100 shadow-[4px_4px_0px_#000]">
              &larr; Back to Demo
            </Link>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="border-2 border-black p-2 bg-white">
              <div className="relative w-full h-96 border-2 border-black">
                <Image src={product.imageUrl} alt={product.name} fill style={{ objectFit: 'cover' }} />
              </div>
            </div>
            <div className="flex flex-col">
              <h1 className="text-3xl md:text-4xl font-bold">{product.name}</h1>
              <p className="text-lg text-gray-600 mt-1">{product.category}</p>
              <p className="text-2xl md:text-3xl font-bold my-4">${product.price.toFixed(2)}</p>
              <div className="border-y-2 border-black py-4">
                <p className="text-md leading-relaxed">{product.description}</p>
              </div>
              <div className="mt-6">
                <h3 className="font-bold">Style & Tags:</h3>
                <div className="flex flex-wrap gap-2 mt-2">
                  <span className="px-3 py-1 border-2 border-black bg-black text-white font-bold text-sm">{product.style}</span>
                  {product.tags.map((tag) => (
                    <span key={tag} className="px-3 py-1 border-2 border-black bg-gray-100 font-bold text-sm">{tag}</span>
                  ))}
                </div>
              </div>
              <div className="mt-auto pt-8 space-y-4">
                <button
                  onClick={() => setIsARVisible(true)}
                  className="w-full px-6 py-4 border-2 border-black bg-white text-black font-bold text-lg hover:bg-gray-100 shadow-[4px_4px_0px_#000]"
                >
                  View in your Room (AR)
                </button>
                <button className="w-full px-6 py-4 border-2 border-black bg-black text-white font-bold text-lg hover:bg-gray-800 shadow-[4px_4px_0px_#000]">
                  Add to Cart
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {isARVisible && (
        <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
          <div className="w-full h-full max-w-3xl max-h-[80vh] bg-white border-4 border-black p-4 relative">
            <button
              onClick={() => setIsARVisible(false)}
              className="absolute -top-4 -right-4 z-10 w-10 h-10 border-2 border-black bg-white text-black font-bold text-2xl hover:bg-gray-200"
            >
              &times;
            </button>
            <ARViewer />
          </div>
        </div>
      )}
    </>
  )
}

================
File: app/welcome/_components/Step3Upload.tsx
================
'use client'
import { useDemoStore } from '@/lib/store/demo-store'
import { useState, useCallback } from 'react'
import { useDropzone } from 'react-dropzone'
import Image from 'next/image'
import { analyzeAndMatch } from '../actions'

export function Step3Upload() {
  const { setStep, setData, uploadedFile, style, roomType, budget, lifestyleTags } = useDemoStore()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null) // State for error message
  const [preview, setPreview] = useState<string | null>(null)

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0]
    if (file) {
      setData({ uploadedFile: file })
      setPreview(URL.createObjectURL(file))
      setError(null) // Clear previous errors on new upload
    }
  }, [setData])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { 'image/*': ['.jpeg', '.png', '.jpg', '.webp'] },
    maxFiles: 1,
  })

  const handleAnalyze = async () => {
    if (!uploadedFile || !style || !roomType || !budget) return
    
    setIsLoading(true)
    setError(null)
    console.log('[CLIENT] Starting analysis...')

    try {
      const result = await analyzeAndMatch({
        image: uploadedFile,
        style,
        roomType,
        budget,
        lifestyleTags,
      })

      if (result.error) {
        throw new Error(result.error)
      }

      console.log('[CLIENT] Analysis successful. Setting data and moving to step 4.')
      setData({ analysisResult: result.analysis, recommendations: result.recommendations })
      useDemoStore.getState().setUploadedFileUrl(result.publicUrl!)
      setStep(4)

    } catch (e: unknown) {
      console.error('[CLIENT] An error occurred during analysis:', e)
      setError(e instanceof Error ? e.message : 'An unknown error occurred. Please try again.')
      // We stay on step 3 to show the error
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="max-w-2xl mx-auto text-center">
      <h1 className="text-3xl font-bold mb-2">Show us your space.</h1>
      <p className="text-md mb-8">We&apos;ll match recommendations to your existing style and lighting.</p>
      
      {error && (
        <div className="p-4 mb-4 border-2 border-black bg-red-500 text-white font-bold">
          <p>Error: {error}</p>
        </div>
      )}

      <div {...getRootProps()} className={`p-6 border-4 border-dashed border-black bg-white cursor-pointer transition-all ${isDragActive ? 'bg-gray-200' : ''}`}>
        <input {...getInputProps()} />
        {preview ? (
          <div className="relative w-full h-80">
            <Image src={preview} alt="Room preview" fill style={{ objectFit: 'contain' }} />
          </div>
        ) : (
          <p className="h-80 flex items-center justify-center font-bold">Drag &apos;n&apos; drop a photo here, or click to select a file</p>
        )}
      </div>
      <div className="mt-8 flex gap-4 justify-center">
        <button onClick={() => setStep(2)} className="px-8 py-3 border-2 border-black bg-white font-bold hover:bg-gray-100 shadow-[4px_4px_0px_#000]">Back</button>
        <button onClick={handleAnalyze} disabled={!uploadedFile || isLoading} className="px-8 py-3 border-2 border-black bg-black text-white font-bold disabled:bg-gray-400 disabled:text-gray-600 disabled:shadow-none hover:bg-gray-800 shadow-[4px_4px_0px_#000]">
          {isLoading ? 'Analyzing...' : 'Analyze & Get Matches'}
        </button>
      </div>
    </div>
  )
}

================
File: app/welcome/actions.ts
================
'use server'

import { createClient } from '@/lib/supabase/server'
import { openai } from '@ai-sdk/openai'
import { generateObject } from 'ai'
import { z } from 'zod'
import type { StyleSelection, RoomType, Budget } from '@/lib/store/demo-store'
import { productCatalog } from '@/lib/mock-data/products'

interface AnalyzeRoomParams {
  style: StyleSelection;
  roomType: RoomType;
  budget: Budget;
  lifestyleTags: string[];
  image: File;
}

export async function analyzeAndMatch(params: AnalyzeRoomParams) {
  console.log('[SERVER] Received request to analyze room.');
  try {
    const supabase = await createClient();
    console.log('[SERVER] Supabase client created.');

    // 1. Upload image to Supabase Storage
    const filePath = `room-uploads/${Date.now()}-${params.image.name}`;
    console.log(`[SERVER] Attempting to upload to Supabase Storage at path: ${filePath}`);
    
    const { error: uploadError } = await supabase.storage
      .from('product-assets')
      .upload(filePath, params.image);

    if (uploadError) {
      console.error('[SERVER] Supabase Upload Error:', uploadError.message);
      return { error: `Storage Error: ${uploadError.message}` };
    }
    console.log('[SERVER] Image upload successful.');

    // 2. Get public URL of the uploaded image
    const { data: { publicUrl } } = supabase.storage
      .from('product-assets')
      .getPublicUrl(filePath);
    console.log(`[SERVER] Got public URL for image: ${publicUrl}`);

    if (!publicUrl) {
      console.error('[SERVER] Failed to get public URL.');
      return { error: 'Could not retrieve image URL after upload.' };
    }

    // 3. Call OpenAI Vision API
    const systemPrompt = `You are an expert interior design assistant. Your task is to analyze an image of a user's room in the context of their stated style preferences. Based on ALL the information, provide a structured analysis of the room. Identify key visual elements, materials, lighting conditions, and overall current vibe. Generate a list of descriptive tags that can be used to match products. The user's desired style is the most important factor.`;
    const userPrompt = `User Preferences:\n- Desired Style: ${params.style}\n- Room Type: ${params.roomType}\n- Budget: ${params.budget}\n- Lifestyle Needs: ${params.lifestyleTags.join(', ')}\n\nAnalyze the room in the provided image and generate a description and tags.`;
    
    console.log('[SERVER] Calling OpenAI Vision API...');
    const { object: analysis } = await generateObject({
      model: openai('gpt-4o-mini'),
      schema: z.object({
        description: z.string().describe("A brief, one-paragraph description of the room's current state, style, and key features."),
        tags: z.array(z.string()).describe("A list of 5-10 descriptive tags about the room (e.g., 'natural-light', 'wooden-floor', 'white-walls', 'needs-color', 'cluttered')."),
        colorPalette: z
          .array(z.string())
          .describe("A list of the 3-5 dominant colors in the room (e.g., 'beige', 'oak-wood', 'charcoal-gray').")
          .optional(),
      }),
      system: systemPrompt,
      messages: [{ role: 'user', content: [{ type: 'text', text: userPrompt }, { type: 'image', image: publicUrl }] }],
    });
    console.log('[SERVER] OpenAI analysis successful:', analysis);

    // 4. Match products from catalog using a scoring system
    console.log('[SERVER] Matching products from catalog with scoring system...');
    const scoredProducts = productCatalog.map((product) => {
      let score = 0
      // Major score for matching the desired style
      if (product.style === params.style) {
        score += 10
      }
      // Score for overlapping tags between product and AI analysis
      const matchingTags = product.tags.filter((tag) => analysis.tags.includes(tag))
      score += matchingTags.length * 2
      // Bonus points if product category seems relevant to room type
      if (params.roomType === 'Living Room' && ['Chairs', 'Sofas', 'Tables', 'Rugs'].includes(product.category)) {
        score += 3
      }
      if (params.roomType === 'Bedroom' && ['Beds', 'Storage', 'Rugs'].includes(product.category)) {
        score += 3
      }
      if (params.roomType === 'Home Office' && ['Chairs', 'Storage', 'Lighting'].includes(product.category)) {
        score += 3
      }
      if (params.roomType === 'Kitchen' && ['Tables', 'Lighting', 'Storage'].includes(product.category)) {
        score += 3
      }
      return { ...product, score }
    })

    const recommendedProducts = scoredProducts
      .filter((p) => p.score > 0)
      .sort((a, b) => b.score - a.score)

    console.log(`[SERVER] Found ${recommendedProducts.length} products with a score > 0.`)
    console.log('[SERVER] Top 5 scored products:', recommendedProducts.slice(0, 5).map((p) => ({ name: p.name, score: p.score })))

    const finalRecommendations = recommendedProducts.length > 0
      ? recommendedProducts.slice(0, 6)
      : productCatalog.filter((p) => p.style === params.style).slice(0, 3)

    console.log('[SERVER] Analysis and matching complete. Returning results.');
    return { analysis, recommendations: finalRecommendations, publicUrl, error: null };

  } catch (e: unknown) {
    console.error('[SERVER] A critical error occurred in analyzeAndMatch:', e);
    return { error: e instanceof Error ? e.message : 'An unexpected server error occurred.' };
  }
}





================================================================
End of Codebase
================================================================
